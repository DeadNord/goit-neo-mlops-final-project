# yaml-language-server: $schema=https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json

stages: [retrain, build, deploy]

# Всегда используем Dependency Proxy для образов раннера и dind
# (не через переменные-посредники, а напрямую)
.default-docker: &default-docker
  image: "$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/docker:24"
  services:
    - name: "$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/docker:24-dind"
      command: ["--tls=false", "--mtu=1460"]
  before_script:
    # Логин в GitLab Container Registry для пуша итогового образа
    - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
    # Логин в Dependency Proxy (чтобы тянуть docker:24*, python:3.11-slim и т.д.)
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_DEPENDENCY_PROXY_SERVER"

variables:
  IMAGE: "$CI_REGISTRY_IMAGE/aiops-quality-service"
  DOCKER_TLS_CERTDIR: "" # для docker:dind
  GIT_STRATEGY: fetch
  GIT_DEPTH: "0"

retrain-model:
  stage: retrain
  image: "$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/python:3.11-slim"
  script:
    - pip install -r app/requirements.txt
    - python model/train.py
    - mkdir -p artifacts && cp /model/model.pkl artifacts/ || true
  artifacts:
    paths: [artifacts/model.pkl]
  when: manual
  only: [main]

build-image:
  stage: build
  <<: *default-docker
  needs: ["retrain-model"]
  script:
    - VERSION="$(cat VERSION)"
    - docker build --pull \
      -f docker/Dockerfile.app \
      --build-arg PYTHON_IMAGE="$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/python:3.11-slim" \
      -t "$IMAGE:$VERSION" .
    - docker push "$IMAGE:$VERSION"
  only: [main]

bump-helm-and-tag:
  stage: deploy
  image: "$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX/alpine:3.19"
  before_script:
    - apk add --no-cache git openssh-client sed
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - |
      if [ -f "$DEPLOY_SSH_KEY" ]; then
        cp "$DEPLOY_SSH_KEY" ~/.ssh/id_ed25519
      else
        printf "%s\n" "$DEPLOY_SSH_KEY" > ~/.ssh/id_ed25519
      fi
    - chmod 600 ~/.ssh/id_ed25519
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_ed25519
    - ssh-keyscan -t rsa,ecdsa,ed25519 gitlab.com >> ~/.ssh/known_hosts
    - git remote set-url origin "git@gitlab.com:goit-neo/mlops-final-project.git"
    - git fetch --all --tags
    - git checkout -B "${CI_COMMIT_REF_NAME}"
    - git pull --ff-only origin "${CI_COMMIT_REF_NAME}" || true
    - git config user.email "ci-bot@gitlab"
    - git config user.name "CI Bot"
  script: |
    set -e
    VERSION="$(cat VERSION)"

    sed -i -E 's/^( *tag:).*/\1 "'"$VERSION"'"/' helm/values.yaml
    sed -i -E 's/^( *appVersion:).*/\1 "'"$VERSION"'"/' helm/Chart.yaml

    git add helm/values.yaml helm/Chart.yaml
    git commit -m "chore: bump helm to ${VERSION}" || echo "nothing to commit"
    git tag -f "v${VERSION}" || true

    GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=yes' git push origin "HEAD:${CI_COMMIT_REF_NAME}"
    GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=yes' git push origin --force "refs/tags/v${VERSION}"
  only: [main]
